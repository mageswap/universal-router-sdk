{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/NFTTrade.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  switch (chainId) {\n    case 1: // mainnet\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 5: // goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 137: // polygon\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 80001: // polygon mumbai\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 10: // optimism\n      return '0xb555edF5dcF85f42cEeF1f3630a52A108E55A654'\n    case 420: // optimism goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 42161: // arbitrum\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 421613: // arbitrum goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 42220: // celo\n      return '0xC73d61d192FB994157168Fb56730FdEc64C9Cb8F'\n    case 44787: // celo alfajores\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 56: // binance smart chain\n      return '0x5Dc88340E1c5c6366864Ee415d6034cadd1A9897'\n    case 250: //fantom\n      return \"0x22AB7B8f0cf0288904dfCb192d17765C808dE4c7\"\n    default:\n      throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  }\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  switch (chainId) {\n    case 1: //mainnet\n      return '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'\n    case 5: // goerli\n      return '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6'\n    case 137: // polygon\n      return '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\n    case 80001: // polygon mumbai\n      return '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889'\n    case 10: // optimism\n      return '0x4200000000000000000000000000000000000006'\n    case 420: // optimism goerli\n      return '0x4200000000000000000000000000000000000006'\n    case 42161: // arbitrum\n      return '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1'\n    case 421613: // arbitrum goerli\n      return '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3'\n    case 56: // binance smart chain\n      return '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c'\n    default:\n      throw new Error(`WETH9 or UniversalRouter not deployed on chain ${chainId}`)\n  }\n}\n\nexport const PERMIT2_ADDRESS = '0xe820edC3aa5933966081850861a5f79517f9A72a'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import JSBI from 'jsbi'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@mageswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@mageswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@mageswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@mageswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = true\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@mageswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000006c3852cbef3e08e8df289169ede581': // Seaport v1.1\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@mageswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@mageswap/v3-sdk'\nimport { Trade as RouterTrade } from '@mageswap/router-sdk'\nimport { Currency, TradeType } from '@mageswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade or NFTTrade'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    if (nftTrades.length > 0) planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot: string\n  merkleProof: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const { takerBid, makerOrder, makerSignature, value, merkleTree } = this.refactorAPIData(item)\n      const calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBid,\n        makerOrder,\n        makerSignature,\n        merkleTree,\n        ZERO_ADDRESS, // affiliate\n      ])\n\n      planner.addCommand(CommandType.LOOKS_RARE_V2, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(data: LooksRareV2Data): {\n    takerBid: TakerOrder\n    makerOrder: MakerOrder\n    makerSignature: string\n    value: BigNumber\n    merkleTree: MerkleTree\n  } {\n    const makerOrder: MakerOrder = { ...data.apiOrder }\n\n    const makerSignature: string = data.apiOrder.signature\n\n    const takerBid: TakerOrder = {\n      recipient: data.taker,\n      additionalParameters: '0x',\n    }\n\n    const value: BigNumber = BigNumber.from(data.apiOrder.price)\n\n    const merkleTree: MerkleTree = {\n      root: data.apiOrder.merkleRoot,\n      proof: data.apiOrder.merkleProof,\n    }\n\n    return { takerBid, makerOrder, makerSignature, value, merkleTree }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000006c3852cbef3e08e8df289169ede581': // Seaport v1.1\n        return CommandType.SEAPORT\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token == token ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(permit2.details.token === this.wethAddress, `must be permitting WETH address: ${this.wethAddress}`)\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n"],"names":["RouterTradeType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","_ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","RoutePlanner","commands","inputs","_proto","prototype","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","UNIVERSAL_ROUTER_ADDRESS","chainId","WETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","_this$options$recipie","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","length","outputIsNative","outputAmount","inputIsNative","routerMustCustody","_iterator","_createForOfIteratorHelperLoose","swaps","_step","done","swap","value","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","riskOfPartialFill","_ref","V2Trade","path","map","pool","_ref2","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","process","env","NODE_ENV","invariant","permit2TransferFrom","mapApprovalProtocol","amount","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","orders","currentNativeValueInRouter","transactionValue","NFTTrade","nftTrade","tradePrice","getTotalPrice","lt","add","sub","uniswapTrade","swapOptions","inputTokenPermit","UnwrapWETH","encodePlan","swapNFTCallParameters","totalPrice","_iterator2","_step2","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","toHexString","Interface","abi","market","Market","TokenType","CryptopunkTrade","_NFTTrade","_inheritsLoose","call","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","_iterator3","_step3","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","_this$refactorAPIData","refactorAPIData","takerBid","makerOrder","makerSignature","merkleTree","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","_iterator4","_step4","data","_extends","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","order","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","Seaport","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","_this$getAdvancedOrde","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","_iterator5","_step5","_iterator6","offer","_step6","identifierOrCriteria","totalOrderPrice","_iterator7","_step7","calculateValue","consideration","_iterator8","_step8","_iterator9","_step9","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","_loop","j","findIndex","x","recipientIndex","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data"],"mappings":"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"}